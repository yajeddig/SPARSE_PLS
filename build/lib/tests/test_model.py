import sys
import os
import pytest
import numpy as np
import pandas as pd
from sklearn.datasets import make_regression
from numpy.testing import assert_array_almost_equal
from model import SparsePLS

# Add the parent directory to the system path to import the model module
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

@pytest.fixture
def data():
    """
    Generate synthetic regression data for testing.

    Returns
    -------
    X_np : ndarray of shape (100, 10)
        The feature matrix as a NumPy array.

    X_df : pandas.DataFrame of shape (100, 10)
        The feature matrix as a pandas DataFrame with column names.

    y : ndarray of shape (100,)
        The target values.

    feature_names : list of str
        The list of feature names.
    """
    # Generate synthetic regression data
    X_np, y = make_regression(
        n_samples=100, n_features=10, noise=0.1, random_state=42
    )
    # Create feature names
    feature_names = [f'feature_{i}' for i in range(X_np.shape[1])]
    # Create a pandas DataFrame with feature names
    X_df = pd.DataFrame(X_np, columns=feature_names)
    return X_np, X_df, y, feature_names

def test_numpy_input(data):
    """
    Test the SparsePLS model with NumPy array input.

    Parameters
    ----------
    data : fixture
        The synthetic data generated by the `data` fixture.

    Asserts
    -------
    Checks if the model has been trained correctly by verifying the presence
    of the `coef_` attribute.
    """
    X_np, _, y, _ = data
    # Initialize the model
    model = SparsePLS(n_components=2, alpha=0.1)
    # Fit the model with NumPy array input
    model.fit(X_np, y)
    # Assert that the model has been trained and coefficients are available
    assert hasattr(model, 'coef_'), (
        "The model was not trained correctly with numpy.ndarray input."
    )

def test_pandas_input(data):
    """
    Test the SparsePLS model with pandas DataFrame input.

    Parameters
    ----------
    data : fixture
        The synthetic data generated by the `data` fixture.

    Asserts
    -------
    Checks if the model has been trained correctly by verifying the presence
    of the `coef_` attribute.
    """
    _, X_df, y, _ = data
    # Initialize the model
    model = SparsePLS(n_components=2, alpha=0.1)
    # Fit the model with pandas DataFrame input
    model.fit(X_df, y)
    # Assert that the model has been trained and coefficients are available
    assert hasattr(model, 'coef_'), (
        "The model was not trained correctly with pandas.DataFrame input."
    )

def test_column_names_preserved(data):
    """
    Test if the feature names are preserved after fitting the model.

    Parameters
    ----------
    data : fixture
        The synthetic data generated by the `data` fixture.

    Asserts
    -------
    Checks if the `feature_names_in_` attribute matches the original feature names.
    """
    _, X_df, y, feature_names = data
    # Initialize the model
    model = SparsePLS(n_components=2, alpha=0.1)
    # Fit the model
    model.fit(X_df, y)
    # Assert that feature names are preserved
    assert model.feature_names_in_ is not None, (
        "Feature names were not preserved."
    )
    assert list(model.feature_names_in_) == feature_names, (
        "Feature names do not match."
    )

def test_prediction(data):
    """
    Test the prediction consistency between NumPy array and pandas DataFrame inputs.

    Parameters
    ----------
    data : fixture
        The synthetic data generated by the `data` fixture.

    Asserts
    -------
    Checks if the predictions are almost equal when using NumPy array and pandas DataFrame.
    """
    X_np, X_df, y, feature_names = data
    # Generate new synthetic test data
    X_test_np, _ = make_regression(
        n_samples=10, n_features=10, noise=0.1, random_state=24
    )
    # Create a pandas DataFrame for test data
    X_test_df = pd.DataFrame(X_test_np, columns=feature_names)

    # Initialize and fit the model
    model = SparsePLS(n_components=2, alpha=0.1)
    model.fit(X_df, y)

    # Make predictions using NumPy array and pandas DataFrame
    y_pred_np = model.predict(X_test_np)
    y_pred_df = model.predict(X_test_df)

    # Assert that predictions are almost equal
    assert_array_almost_equal(
        y_pred_np, y_pred_df,
        err_msg=(
            "Predictions differ between numpy.ndarray and pandas.DataFrame inputs."
        )
    )

def test_invalid_input():
    """
    Test the model's response to invalid input data.

    Asserts
    -------
    Expects a ValueError when invalid input data is provided.
    """
    X_invalid = "invalid_input"  # Invalid feature input
    y_invalid = [1, 2, 3]        # Invalid target input

    # Initialize the model
    model = SparsePLS(n_components=2, alpha=0.1)

    # Expect a ValueError when fitting with invalid inputs
    with pytest.raises(ValueError):
        model.fit(X_invalid, y_invalid)
